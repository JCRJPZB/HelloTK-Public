{"version":3,"sources":["file:///E:/GitHub/HelloTK/assets/Script/UI/MainScene/Inventory/InventoryMgr.ts"],"names":["_decorator","Component","ItemMgr","Functions","Subscribe","ccclass","property","InventoryMgr","constructor","name","inventory_data","getInventoryData","itemMgr","getInstance","item_types_id","getItemTypes","listen","changeItemNum","ist","test_data","getInventoryByType","type_name","items","forEach","id","concat","num","trigger","item","getItemConf","item_list","find_flag","idx","res","normalize","indexOf","push","slice"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node } from 'cc';\r\nimport { ItemMgr } from '../../../Items/ItemMgr';\r\nimport { Functions } from '../../../Tools/Functions';\r\nimport { Subscribe } from '../../../Tools/Subscribe';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('InventoryMgr')\r\nexport class InventoryMgr extends Component {\r\n\r\n    private static ist: InventoryMgr;\r\n    private itemMgr: ItemMgr | null = null;\r\n    private item_types_id: any[] = [];\r\n\r\n    private inventory_data: any = {\r\n        \"resources\": [],\r\n        \"spirit\": [],\r\n        \"equipment\": [],\r\n        \"tool\": []\r\n    };\r\n\r\n    // ###############################################\r\n    private test_data: any = {\r\n        \"resources\": [\r\n            {\r\n                \"id\": \"Diamond\",\r\n                \"num\": 1500\r\n            },\r\n            {\r\n                \"id\": \"Gold\",\r\n                \"num\": 1000000\r\n            }\r\n        ],\r\n        \"spirit\": [],\r\n        \"equipment\": [],\r\n        \"tool\": [\r\n            {\r\n                \"id\": \"GiftBox\",\r\n                \"num\": 2\r\n            }\r\n        ]\r\n    };\r\n    // ###############################################\r\n\r\n    private constructor(name: string) {\r\n        super(name);\r\n        this.inventory_data = this.getInventoryData();\r\n        this.itemMgr = ItemMgr.getInstance();\r\n        this.item_types_id = this.itemMgr.getItemTypes();\r\n        Subscribe.listen(\"collect item\", this.name, this.changeItemNum, this);\r\n        Subscribe.listen(\"use item\", this.name, this.changeItemNum, this);\r\n    }\r\n\r\n    public static getInstance() {\r\n        if (!InventoryMgr.ist) { InventoryMgr.ist = new InventoryMgr(\"InventoryMgr\"); }\r\n        return InventoryMgr.ist;\r\n    }\r\n\r\n    private getInventoryData() {\r\n        // ########################\r\n        return this.test_data; // #\r\n        // ########################\r\n    }\r\n\r\n    public getInventoryByType(type_name: string) {\r\n        if (type_name === \"all\") {\r\n            let items: any[] = [];\r\n            this.item_types_id.forEach(id => {\r\n                if (id[\"type_id\"] === \"all\") { return; }\r\n                items = items.concat(this.inventory_data[id[\"type_id\"]]);\r\n            });\r\n            return items;\r\n        }\r\n        return this.inventory_data[type_name];\r\n    }\r\n\r\n    private changeItemNum(id: string, num: number) {\r\n        if (!this.itemMgr) { Subscribe.trigger(\"log err\", \"InventoryMgr init failed\"); return; }\r\n        let item = this.itemMgr.getItemConf(id);\r\n        if (item) {\r\n            let item_list: any[] = this.inventory_data[item[\"type_id\"]];\r\n            let find_flag: boolean = false;\r\n            let idx = 0, res = 0;\r\n            item_list.forEach(item => {\r\n                if (item[\"id\"] === id) {\r\n                    res = item[\"num\"] = Functions.normalize(item[\"num\"] + num, 0, null);\r\n                    idx = item_list.indexOf(item);\r\n                    find_flag = true;\r\n                }\r\n            });\r\n            if (!find_flag && num > 0) {\r\n                item_list.push({ \"id\": id, \"num\": num });\r\n            }\r\n            if (find_flag && idx > -1 && res <= 0) {\r\n                item_list = item_list.slice(idx, idx);\r\n            }\r\n            this.inventory_data[item[\"type_id\"]] = item_list;\r\n        }\r\n        Subscribe.trigger(\"change item num\");\r\n    }\r\n}\r\n"]}