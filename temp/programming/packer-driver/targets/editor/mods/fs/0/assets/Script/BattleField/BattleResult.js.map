{"version":3,"sources":["file:///E:/GitHub/HelloTK/assets/Script/BattleField/BattleResult.ts"],"names":["_decorator","Label","ItemMgr","Functions","Generator","Subscribe","StageMgr","UIBase","ccclass","property","BattleResult","onInit","params","stage_data","victory","getNode","defeat","abandon","goals_root","reward_root","addClickEvent","trigger","getInstance","curr_scene","onOpen","active","conf","getStageConfById","gen","setGoalNode","setRewardsNode","goal_flags","goal_strs","getStageGoal","i","length","goal_node","generator","goal_lbl","getComponent","string","disable","getChildByName","enable","forEach","item","isGet","probToVal","num","randomInSec","getItemNode"],"mappings":"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","sourcesContent":["import { _decorator, Node, Label } from 'cc';\r\nimport { ItemMgr } from '../Items/ItemMgr';\r\nimport { Functions } from '../Tools/Functions';\r\nimport { Generator } from '../Tools/Generator';\r\nimport { Subscribe } from '../Tools/Subscribe';\r\nimport { StageMgr } from '../UI/StageScene/StageMgr';\r\nimport { UIBase } from '../UI/UIBase';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('BattleResult')\r\nexport class BattleResult extends UIBase {\r\n\r\n    private victory: Node | undefined;\r\n    private defeat: Node | undefined;\r\n    private abandon: Node | undefined;\r\n    private goals_root: Node | undefined;\r\n    private reward_root: Node | undefined;\r\n    private stage_data: any = null;\r\n\r\n    protected onInit(params: any) {\r\n        this.stage_data = params[0];\r\n        this.victory = this.getNode(\"Victory\"); // 胜利界面节点\r\n        this.defeat = this.getNode(\"Defeat\"); // 失败界面节点\r\n        this.abandon = this.getNode(\"Abandon\"); // 放弃作战界面节点\r\n        this.goals_root = this.getNode(\"Goals_Content\"); // “目标”根节点\r\n        this.reward_root = this.getNode(\"Rewards_Content\"); // 战利品根节点\r\n        this.addClickEvent(\"Return_Btn\", () => {\r\n            Subscribe.trigger(\"load scene\", \"Expedition\", StageMgr.getInstance().curr_scene); // 返回选关界面\r\n        });\r\n        this.addClickEvent(\"Again_Btn\", () => {\r\n            Subscribe.trigger(\"load scene\", \"BattleField\", this.stage_data);\r\n        });\r\n    }\r\n\r\n    protected onOpen(params: any) {\r\n        if (!this.defeat || !this.victory || !this.abandon) {\r\n            Subscribe.trigger(\"log err\", \"Result node can't be null!\");\r\n            return;\r\n        }\r\n        this.abandon.active = this.victory.active = this.defeat.active = false; // 初始化三个界面的显示状态\r\n        if (params[1]) { // 显示放弃战斗结算界面\r\n            this.abandon.active = true; return;\r\n        }\r\n        if (!params[2]) { // 显示战斗失败结算画面\r\n            Subscribe.trigger(\"stage failed\", this.stage_data[\"stage_id\"]);\r\n            this.defeat.active = true; return;\r\n        }\r\n\r\n        this.victory.active = true; // 显示战斗胜利结算画面\r\n        let conf = StageMgr.getInstance().getStageConfById(this.stage_data[\"stage_id\"]); // 根据关卡名读取当前关卡配置\r\n        let gen = Generator.getInstance(); // 预制体实例化生成器\r\n        this.setGoalNode(gen, params[3]); // 放置关卡三星目标条件\r\n        this.setRewardsNode(conf); // 放置掉落物\r\n        Subscribe.trigger(\"stage clear\", this.stage_data[\"stage_id\"]); // 发射通关关卡消息\r\n    }\r\n\r\n    private setGoalNode(gen: Generator, goal_flags: boolean[]) {\r\n        let goal_strs = StageMgr.getInstance().getStageGoal(this.stage_data[\"stage_id\"]); // 获取三星目标条件文本\r\n        for (let i = 0; i < goal_strs.length && i < goal_flags.length; i++) { // 循环摆放\r\n            if (this.goals_root) {\r\n                let goal_node = gen.generator(this.goals_root, \"Stage_Goal\"); // 实例化文本及标识预制体\r\n                if (goal_node) {\r\n                    let goal_lbl = goal_node.getComponent(Label);\r\n                    if (goal_lbl) { goal_lbl.string = goal_strs[i]; } // 设置文本\r\n                    let disable = goal_node.getChildByName(\"Point_Disable\"); // 根据是否完成目标修改标识\r\n                    let enable = goal_node.getChildByName(\"Point_Enable\");\r\n                    if (disable && enable) { [disable.active, enable.active] = [!goal_flags[i], goal_flags[i]]; }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private setRewardsNode(conf: any) {\r\n        conf[\"items\"].forEach((item: any) => {\r\n            if (conf[\"clear\"] && item[\"is_once\"]) {\r\n                return;\r\n            }\r\n            if (this.reward_root) {\r\n                if (item[\"p\"] < 1) { // 根据概率判断是否掉落该物品\r\n                    let isGet = Functions.probToVal([item[\"p\"], 1 - item[\"p\"]], [true, false]);\r\n                    if (!isGet) { return; } // 没有则跳过\r\n                }\r\n                let num = 0;\r\n                if (item[\"max\"] > 1) { // 最大掉落数大于1则显示掉落数\r\n                    if (item[\"max\"] == item[\"min\"]) { num = item[\"max\"] } // 最大等于最小则直接显示掉落数\r\n                    else { num = Functions.randomInSec(item[\"max\"], item[\"min\"]); } // 否则则随机从区间内取值\r\n                } else {\r\n                    num = 1;\r\n                }\r\n                ItemMgr.getInstance().getItemNode(item[\"id\"], this.reward_root, num);\r\n            }\r\n        });\r\n    }\r\n}\r\n"]}