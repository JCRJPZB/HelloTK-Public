{"version":3,"sources":["file:///E:/GitHub/HelloTK/assets/Script/Heros/Formation/Formation.ts"],"names":["_decorator","v3","Sprite","find","Configure","Functions","Generator","ImgMgr","Subscribe","UIBase","HerosMgr","FormationBar","HeroPortrait","ccclass","property","Formation","Map","onInit","gen","getInstance","hero_root","getNode","portrait_root","formation_name","getComp","bar_root","alert_root","troop_conf","getTroops","formation_conf","string","max_selection","length","i","portrait","generator","portraits","push","curr_formation_id","setFormationBar","addClickEvent","finishEvent","listen","name","changeSpHero","changeSelected","changeFormation","sort_map","sortStr","bind","sort_type","setHero","onOpen","updateFormation","e","selected_hero_ids","ids_idxs","trigger","hero_map","size","node","getPosition","conf","getConfigure","formation_conf_map","set","ctrl","getComponent","init","formation_ctrl_map","id","get","changeState","heros_conf_map","ids_sp","ids_nm","ids","hero_portrait","is_select","call_back","canvas_pos","worldPosition","portrait_pos","pos","subtract","idx","indexOf","splice","update_hero","udpate_pos","portrait_sp","spriteFrame","hero_id","getImg","pos_idxs","prePos","setPosition","isAdd","add_ids","del_ids","del_idx","updateOder","sort_func","removeAllChildren","forEach","parent","concat"],"mappings":"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","sourcesContent":["import { _decorator, Node, v3, Sprite, Label, Button, find } from 'cc';\r\nimport { Configure } from '../../Tools/Configure';\r\nimport { Functions } from '../../Tools/Functions';\r\nimport { Generator } from '../../Tools/Generator';\r\nimport { ImgMgr } from '../../Tools/ImgMgr';\r\nimport { Subscribe } from '../../Tools/Subscribe';\r\nimport { UIBase } from '../../UI/UIBase';\r\nimport { HerosMgr } from '../HerosMgr';\r\nimport { FormationBar } from './FormationBar';\r\nimport { HeroPortrait } from './HeroPortrait';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('Formation')\r\nexport class Formation extends UIBase {\r\n\r\n    private troop_conf: any; // 队伍配置及数据\r\n    private formation_conf: any; // 编队配置及数据\r\n    private hero_map: Map<string, Node> = new Map(); // 武将节点Map\r\n    private max_selection: number = 0; // 编队最大人数\r\n    private selected_hero_ids: string[] = []; // 被选中的武将id数组\r\n\r\n    private hero_root: Node | undefined; // 武将根节点\r\n    private alert_root: Node | undefined; // 提示Label根节点\r\n\r\n    private portrait_root: Node | undefined; // 阵型摆放武将头像的根节点\r\n    private portraits: Node[] = []; // 阵型摆放的武将头像节点数组\r\n    private formation_name: Label | undefined; // 阵型名称Label\r\n\r\n    private bar_root: Node | undefined; // 阵型栏根节点\r\n    private curr_formation_id: string = \"\"; // 当前阵型ID\r\n    private formation_ctrl_map: Map<string, FormationBar> = new Map(); // 阵型脚本map\r\n    private formation_conf_map: Map<string, any> = new Map(); // 阵型配置map\r\n\r\n    private gen: Generator | null = null; // 预制体对象实例化生成器\r\n\r\n    private sort_map: Map<string, Function> = new Map(); // 排序方法Map\r\n    private sort_type: string = \"str\"; // 当前排序方式\r\n\r\n    private heros_conf_map: Map<string, any> = new Map(); // 武将属性配置Map\r\n    private ids_sp: string[] = []; // 星标武将id，排在前面\r\n    private ids_nm: string[] = []; // 普通武将id，排在后面\r\n    private ids: string[] = []; // 所有武将id\r\n\r\n    protected onInit() {\r\n        this.gen = Generator.getInstance();\r\n        this.hero_root = this.getNode(\"Hero_Content\"); // 武将根节点\r\n        this.portrait_root = this.getNode(\"Portrait_Root\"); // 阵型摆放武将头像的根节点\r\n        this.formation_name = this.getComp(\"Formation_Name\", \"Label\"); // 阵型名称Label\r\n        this.bar_root = this.getNode(\"Formation_Content\"); // 阵型栏根节点\r\n        this.alert_root = this.getNode(\"Alert_Root\"); // 提示信息的根节点\r\n        this.troop_conf = HerosMgr.getInstance().getTroops(); // 队伍数据配置\r\n        this.formation_conf = this.troop_conf[\"formation\"]; // 阵型配置\r\n        if (this.formation_name) { this.formation_name.string = this.formation_conf[\"name\"]; }\r\n\r\n        this.max_selection = this.formation_conf[\"pos_idxs\"].length; // 最大可编入武将数量\r\n        if (!this.portrait_root) { return; }\r\n        for (let i = 0; i < this.max_selection; i++) { // 生成武将头像\r\n            let portrait = this.gen.generator(this.portrait_root, \"Hero_portrait\");\r\n            if (portrait) this.portraits.push(portrait); // 存入数组\r\n        }\r\n\r\n        this.curr_formation_id = this.formation_conf[\"id\"]; // 保存当前阵型id\r\n        this.setFormationBar(); // 初始化阵型选择栏\r\n\r\n        this.addClickEvent(\"FinishBtn\", this.finishEvent, this);\r\n        Subscribe.listen(\"changeSpHero\", this.name, this.changeSpHero, this); // 监听取消/设为常用消息\r\n        Subscribe.listen(\"change hero selected\", this.name, this.changeSelected, this); // 监听切换武将选中状态消息\r\n        Subscribe.listen(\"change formation\", this.name, this.changeFormation, this); // 监听切换阵型消息\r\n        this.sort_map = new Map([ // 排序方法Map\r\n            [\"str\", this.sortStr.bind(this)]\r\n        ]);\r\n        this.sort_type = \"str\"; // 初始设为默认的方法\r\n        this.setHero(); // 摆放武将\r\n    }\r\n\r\n    protected onOpen() { // 每次打开编队界面都刷新编队状态\r\n        this.troop_conf = HerosMgr.getInstance().getTroops(); // 队伍数据配置\r\n        this.formation_conf = this.troop_conf[\"formation\"]; // 阵型配置\r\n        if (this.formation_name) { this.formation_name.string = this.formation_conf[\"name\"]; }\r\n        this.max_selection = this.formation_conf[\"pos_idxs\"].length; // 最大可编入武将数量\r\n        this.curr_formation_id = this.formation_conf[\"id\"]; // 保存当前阵型id\r\n        this.updateFormation(true, true);\r\n    }\r\n\r\n    private finishEvent(e: Button | null) { // 隐藏编队界面\r\n        if (this.selected_hero_ids.length > 0) {\r\n            let ids_idxs: any[] = [];\r\n            for (let i = 0; i < this.selected_hero_ids.length; i++) {\r\n                ids_idxs.push({ \"id\": this.selected_hero_ids[i], \"idx\": i }); // 收集阵型编队信息\r\n            }\r\n            this.formation_conf[\"ids_idxs\"] = ids_idxs; // 并将数据添加至配置中(对应上面的覆盖时丢失的数据)\r\n            this.troop_conf[\"formation\"] = this.formation_conf; // 更新\r\n            Subscribe.trigger(\"update troop\", this.troop_conf); // 并将新配置发射出去\r\n            Subscribe.trigger(\"go back page\"); // 返回上一个页面\r\n            return; // 若编队中有人则不触发提醒\r\n        }\r\n        if (e && this.hero_map.size > 0 && this.alert_root) { // 若编队空无一人则不退出，提醒玩家\r\n            Subscribe.trigger(\"alert UI\", \"请至少选择一位武将!\", this.alert_root, e.node.getPosition());\r\n        }\r\n    }\r\n\r\n    private setFormationBar() {\r\n        let conf = Configure.getConfigure(\"hero\")[\"common\"][\"formation\"]; // 读取编队配置\r\n        if (!this.bar_root || !this.gen) { return; }\r\n        for (let i = 0; i < conf.length; i++) { // 放置阵型栏\r\n            if (conf[i][\"id\"] === \"monster\") { continue; }\r\n            this.formation_conf_map.set(conf[i][\"id\"], conf[i]); // 保存阵型配置\r\n            let node = this.gen.generator(this.bar_root, \"Formation_Bar\", v3(0, (i * -130) - 75, 0)); // 生成阵型\r\n            let ctrl = node?.getComponent(FormationBar); // 获取阵型栏脚本\r\n            if (ctrl) {\r\n                ctrl.init(conf[i], this.curr_formation_id); // 初始化\r\n                this.formation_ctrl_map.set(conf[i][\"id\"], ctrl); // 保存阵型栏脚本\r\n            }\r\n        }\r\n    }\r\n\r\n    private changeFormation(id: string) { // 切换阵型\r\n        this.formation_ctrl_map.get(this.curr_formation_id)?.changeState(false); // 更新旧阵型状态为disable\r\n        this.formation_ctrl_map.get(id)?.changeState(true); // 更新新阵型状态为enable\r\n        this.curr_formation_id = id; // 更新当前阵型id\r\n        this.formation_conf = this.formation_conf_map.get(id); // 覆盖当前的阵型配置(注意：此操作会丢失阵型中的武将信息，需要补充回去)\r\n        this.updateFormation(false, true); // 更新阵型\r\n    }\r\n\r\n    private setHero() { // 摆放武将\r\n        for (let i = 0; i < this.troop_conf[\"heros\"].length; i++) {\r\n            this.troop_conf[\"heros\"][i][\"idx\"] = i; // 设置好idx，后面修改heros_conf_map时用的上\r\n            this.heros_conf_map.set(this.troop_conf[\"heros\"][i][\"id\"], this.troop_conf[\"heros\"][i]); // 武将配置map\r\n            if (this.troop_conf[\"heros\"][i][\"is_sp\"]) { this.ids_sp.push(this.troop_conf[\"heros\"][i][\"id\"]); } // 保存常用武将\r\n            else { this.ids_nm.push(this.troop_conf[\"heros\"][i][\"id\"]); } // 保存非常用武将\r\n            // 保存被编入编队的武将id\r\n            if (this.troop_conf[\"heros\"][i][\"is_select\"]) { this.selected_hero_ids.push(this.troop_conf[\"heros\"][i][\"id\"]); }\r\n        }\r\n        this.sortStr(); // 根据名称顺序排序\r\n        for (let i = 0; i < this.ids.length; i++) { // 新建武将并放入面板\r\n            if (!this.hero_root || !this.gen) { return; }\r\n            let hero_portrait = this.gen.generator(this.hero_root, \"Hero_2D\");\r\n            if (hero_portrait) {\r\n                hero_portrait.getComponent(HeroPortrait)?.init(this.heros_conf_map.get(this.ids[i])); // 初始化\r\n                this.hero_map.set(this.ids[i], hero_portrait); // 保存节点\r\n            }\r\n        }\r\n    }\r\n\r\n    private changeSelected(id: string, is_select: boolean, call_back: Function) {\r\n        if (!is_select) { // 如果传过来是未被选中说明即将被选中\r\n            if (this.selected_hero_ids.length >= this.max_selection) { // 如果选中的武将数量大于等于最大编入人数\r\n                let canvas_pos = find(\"Canvas\")?.worldPosition; // 计算提示Label显示的位置\r\n                let portrait_pos = this.hero_map.get(id)?.worldPosition;\r\n                if (canvas_pos && portrait_pos && this.alert_root) {\r\n                    let pos = v3(portrait_pos).subtract(canvas_pos);\r\n                    Subscribe.trigger(\"alert UI\", \"编队武将数量已达上限!\", this.alert_root, pos);\r\n                }\r\n                return; // 已达上限，所以不做操作直接返回\r\n            }\r\n            this.selected_hero_ids.push(id); // 若未达到上限，则添加武将至编队\r\n            this.troop_conf[\"heros\"][this.heros_conf_map.get(id)[\"idx\"]][\"is_select\"] = true; // 修改被选中标记\r\n        } else {\r\n            if (this.selected_hero_ids.length <= 0) { return; } // 若已无被选中的武将则直接返回（正常来说这个判断不会为true）\r\n            let idx = this.selected_hero_ids.indexOf(id); // 将取消选中的武将从编队中移除\r\n            this.selected_hero_ids.splice(idx, 1);\r\n            this.troop_conf[\"heros\"][this.heros_conf_map.get(id)[\"idx\"]][\"is_select\"] = false; // 修改被选中标记\r\n        }\r\n        call_back(); // 调用修改编队回调\r\n        this.updateFormation(true, false); // 更新编队信息\r\n    }\r\n\r\n    private updateFormation(update_hero: boolean, udpate_pos: boolean) { // 更新编队信息\r\n        if (!this.portrait_root || !this.selected_hero_ids || !this.formation_conf) { return; }\r\n        if (this.portraits.length < this.selected_hero_ids.length) { // 如果选中的武将多于当前阵型人数，则说明出现问题\r\n            Subscribe.trigger(\"log err\", \"Length of selected heros out of range!\");\r\n        }\r\n        if (update_hero) { // 更新武将头像图片\r\n            for (let i = 0; i < this.portraits.length; i++) {\r\n                let portrait_sp = this.portraits[i].getComponent(Sprite); // 获取头像精灵组件\r\n                if (!portrait_sp) { continue; }\r\n                // 若此时选中武将已配置完成，则剩余的置空\r\n                if (i >= this.selected_hero_ids.length) { portrait_sp.spriteFrame = null; continue; }\r\n                // 反之则更新头像图片\r\n                let hero_id = this.heros_conf_map.get(this.selected_hero_ids[i])[\"hero_id\"];\r\n                // 注意一件事，id和hero_id是不一样的，一个是当前这个武将的id，一个是武将配置中的武将id，即一个是每个玩家不一样一个是所有该武将都一样\r\n                portrait_sp.spriteFrame = ImgMgr.getInstance().getImg(hero_id); // 根据配置设置精灵组件贴图\r\n            }\r\n        }\r\n        if (udpate_pos) { // 更新武将头像位置\r\n            let pos_idxs = this.formation_conf[\"pos_idxs\"]; // 获取阵型位置配置\r\n            let prePos = Configure.getConfigure(\"hero\")[\"common\"][\"prePos\"]; // 获取武将头像位置配置\r\n            for (let i = 0; i < this.portraits.length; i++) {\r\n                let idx = prePos[\"pos\"][pos_idxs[i]];\r\n                let pos = v3(idx[0] * prePos[\"2d_dist\"], idx[1] * prePos[\"2d_dist\"], 0); // 计算头像位置\r\n                this.portraits[i].setPosition(pos); // 设置位置\r\n            }\r\n            if (this.formation_name) { this.formation_name.string = this.formation_conf[\"name\"]; } // 更新阵型名称\r\n        }\r\n    }\r\n\r\n    private changeSpHero(id: string, isAdd: boolean) { // 设为/取消常用\r\n        let idx = this.heros_conf_map.get(id)[\"idx\"];\r\n        this.troop_conf[\"heros\"][idx][\"is_sp\"] = isAdd; // 同步更新配置\r\n        let add_ids: string[], del_ids: string[] = [];\r\n        if (isAdd) { [add_ids, del_ids] = [this.ids_sp, this.ids_nm]; } // 从一个数组中移除并添加至另一个数组\r\n        else { [add_ids, del_ids] = [this.ids_nm, this.ids_sp]; }\r\n        let del_idx = del_ids.indexOf(id);\r\n        del_ids.splice(del_idx, 1); // 删除\r\n        add_ids.push(id); // 添加\r\n        this.updateOder(); // 更新武将顺序\r\n    }\r\n\r\n    private updateOder() {\r\n        let sort_func = this.sort_map.get(this.sort_type);\r\n        if (sort_func) { sort_func(); } // 根据设置找到指定排序方法并调用\r\n        if (this.hero_root) {\r\n            this.hero_root.removeAllChildren(); // 清空武将节点\r\n            this.ids.forEach(id => { // 按照顺序重新摆放\r\n                let node = this.hero_map.get(id)\r\n                if (node && this.hero_root) {\r\n                    node.parent = this.hero_root;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private sortStr() { // 按照字符顺序排序\r\n        Functions.sortStr(this.ids_sp, 0, this.ids_sp.length - 1, 0);\r\n        Functions.sortStr(this.ids_nm, 0, this.ids_nm.length - 1, 0);\r\n        this.ids = this.ids_sp.concat(this.ids_nm);\r\n    }\r\n}\r\n"]}