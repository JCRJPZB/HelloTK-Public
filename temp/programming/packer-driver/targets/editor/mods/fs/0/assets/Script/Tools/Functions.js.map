{"version":3,"sources":["file:///E:/GitHub/HelloTK/assets/Script/Tools/Functions.ts"],"names":["_decorator","Component","Vec3","v4","math","v3","Quat","ccclass","property","sin","cos","sqrt","pow","Math","Functions","numToStr","num","str","temp","toString","floor","slice","length","numToChar","digit","char","char_map","get","concat","alternate","a","b","short","long","i","push","del","target","idx","indexOf","splice","UIFllow3DNode","uiNode","camera","parent","offset","convertToUINode","worldPosition","setPosition","deepCopy","e","copy","key","JSON","parse","stringify","getNodeByName","name","root","child","getChildByName","children","getNodeByPath","path","names","split","sumOfArray","arr","total","forEach","probToVal","ps","values","section","random_num","random","randomInSec","max","min","round","charAt","exch","array","idx_1","idx_2","sortStr","strs","low","high","low_s","high_S","EulerToQuaternion","v","wx","y","z","x","wy","wz","ww","Multiply","q1","q2","w","ToRadian","toRadian","getInverse","q","mod_square","adjoint","multiplyScalar","QuaternionRotate","qv","qr","inverse","qv_r","getRotateVec","invert","res","multiply","normalize","randomFromArray","arr_copy","res_arr","index","Map"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Vec3, Camera, Vec4, v4, math, v3, Quat } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\nconst { sin, cos, sqrt, pow } = Math\r\n\r\n@ccclass('Functions')\r\nexport class Functions extends Component {\r\n    private static char_map: Map<number, string> = new Map([[0, \" \"], [1, \"k\"], [2, \"M\"], [3, \"G\"], [4, \"T\"],\r\n    [5, \"P\"], [6, \"E\"], [7, \"Z\"], [8, \"Y\"]]);\r\n\r\n    // 将数字转为带逗号格式的字符串\r\n    public static numToStr(num: number): string {\r\n        if (num === 0) { return \"0\"; }\r\n        let str: string = \"\";\r\n        let temp: number = num;\r\n        while (temp > 0) {\r\n            temp = temp % 1000;\r\n            if (num >= 1000 && temp < 100) {\r\n                if (temp < 10) {\r\n                    str = \"00\" + temp.toString() + \",\" + str;\r\n                } else {\r\n                    str = \"0\" + temp.toString() + \",\" + str;\r\n                }\r\n            } else {\r\n                str = temp.toString() + \",\" + str;\r\n            }\r\n            num = Math.floor(num / 1000);\r\n            temp = num;\r\n        }\r\n        str = str.slice(0, str.length - 1);\r\n        return str;\r\n    }\r\n\r\n    // 将数字转为带字母的表达形式\r\n    public static numToChar(num: number): string {\r\n        let digit = 0;\r\n        for (; num >= 1000; digit++) num = Math.floor(num / 1000);\r\n        let char = Functions.char_map.get(digit);\r\n        if (char) { return num.toString().concat(char); }\r\n        else return (num *= Math.pow(1000, digit)).toString();\r\n    }\r\n\r\n    // 交替穿插合并两个数组\r\n    public static alternate(a: any[], b: any[]): any[] {\r\n        let temp: any[] = [];\r\n        let short: any[] = a.length > b.length ? b : a;\r\n        let long: any[] = a.length > b.length ? a : b;\r\n        for (let i: number = 0; i < long.length; i++) {\r\n            temp.push(long[i]);\r\n            if (i < short.length) {\r\n                temp.push(short[i]);\r\n            }\r\n        }\r\n        return temp;\r\n    }\r\n\r\n    // 删除数组中指定元素\r\n    public static del(a: any[], target: any): void {\r\n        let idx = a.indexOf(target);\r\n        if (idx > -1) { a.splice(idx, 1); }\r\n    }\r\n\r\n    // 使UI中的节点跟随到3D空间节点(如3D节点会改变位置则需相应更新)\r\n    public static UIFllow3DNode(uiNode: Node, camera: Camera, target: Node): void {\r\n        let parent = uiNode.parent;\r\n        if (!parent) { return; }\r\n        let offset = new Vec3();\r\n        camera.convertToUINode(target.worldPosition, parent, offset);\r\n        uiNode.setPosition(offset);\r\n    }\r\n\r\n    // 深拷贝\r\n    public static deepCopy(e: any): any {\r\n        let copy: any = {};\r\n        for (let key in e) {\r\n            copy[key] = JSON.parse(JSON.stringify(e[key]));\r\n        }\r\n        return copy;\r\n    }\r\n\r\n    // 根据名称寻找指定节点(广度优先)\r\n    public static getNodeByName(name: string, root: Node): Node | null {\r\n        let child = root.getChildByName(name);\r\n        if (child) { return child; }\r\n        let children = root.children;\r\n        while (children.length > 0) {\r\n            child = children[0].getChildByName(name);\r\n            if (child) { break; }\r\n            children = children.concat(children[0].children);\r\n            children.splice(0, 1);\r\n        }\r\n        if (child) { return child };\r\n        return null;\r\n    }\r\n\r\n    // 根据路径寻找指定节点\r\n    public static getNodeByPath(path: string, root: Node): Node | null {\r\n        let names = path.split(\"/\");\r\n        let child: Node | null = root;\r\n        while (names.length > 0) {\r\n            if (!child) { break; }\r\n            child = child.getChildByName(names[0]);\r\n            names.splice(0, 1);\r\n        }\r\n        if (!child) { return null; }\r\n        return child;\r\n    }\r\n\r\n    // 数组求和\r\n    public static sumOfArray(arr: number[]): number {\r\n        let total = 0;\r\n        arr.forEach(num => { total += num; });\r\n        return total;\r\n    }\r\n\r\n    // 根据概率抽值返回\r\n    public static probToVal(ps: number[], values: any[]): any {\r\n        if (values.length < 1) { return null; }\r\n        if (ps.length < 1 || ps.length != values.length) { return values[0]; }\r\n        let total = Functions.sumOfArray(ps);\r\n        let section: number[] = [];\r\n        for (let i = 0; i < ps.length; i++) { // 将概率铺展成区间\r\n            section[i] = 0;\r\n            if (i > 0) { section[i] = section[i - 1]; }\r\n            section[i] += ps[i];\r\n        }\r\n        let random_num = Math.random() * total;\r\n        for (let i = 0; i < section.length; i++) {\r\n            if (random_num <= section[i]) {\r\n                return values[i];\r\n            }\r\n        }\r\n        return values[0];\r\n    }\r\n\r\n    // 根据区间随机返回值\r\n    public static randomInSec(max: number, min: number): number {\r\n        return min + Math.round(Math.random() * (max - min));\r\n    }\r\n\r\n    // 获取指定下标位置的字符，若下标大于长度则返回-1\r\n    private static charAt(str: string, idx: number) {\r\n        if (str.length > idx) return str.charAt(idx);\r\n        return -1;\r\n    }\r\n\r\n    // 交换数组内两个元素的位置\r\n    public static exch(array: any[], idx_1: number, idx_2: number) {\r\n        let temp = array[idx_1];\r\n        array[idx_1] = array[idx_2];\r\n        array[idx_2] = temp;\r\n    }\r\n\r\n    // 三区块基数快速排序\r\n    public static sortStr(strs: string[], low: number, high: number, idx: number) {\r\n        if (high <= low) { return; }\r\n        let low_s = low, high_S = high; // low_s是比当前小的区块下标标记，high_s亦然\r\n        let char = this.charAt(strs[low], idx); // 当前被比较的字符串的指定位置字符\r\n        let i = low + 1;\r\n        while (i <= high_S) {\r\n            let temp = this.charAt(strs[i], idx); // 获取参与比较的字符串的指定位置字符\r\n            if (temp < char) { Functions.exch(strs, low_s++, i++); } // 若比被比较的字符小则移入小区\r\n            else if (temp > char) { Functions.exch(strs, i, high_S--); } // 若比被比较的字符大则移入大区\r\n            else { i++; } // 若相等则不用移动，继续呆在相等区\r\n        }\r\n        Functions.sortStr(strs, low, low_s - 1, idx); // 继续排序小区\r\n        if (char != -1) { Functions.sortStr(strs, low_s, high_S, idx + 1); } // 相等区排序下一位置的字符\r\n        Functions.sortStr(strs, high_S + 1, high, idx); // 继续排序大区\r\n    }\r\n\r\n    // 欧拉角转四元数\r\n    private static EulerToQuaternion(v: Vec3) {\r\n        let wx = sin(v.y / 2) * sin(v.z / 2) * cos(v.x / 2) + cos(v.y / 2) * cos(v.z / 2) * sin(v.x / 2);\r\n        let wy = sin(v.y / 2) * cos(v.z / 2) * cos(v.x / 2) + cos(v.y / 2) * sin(v.z / 2) * sin(v.x / 2);\r\n        let wz = cos(v.y / 2) * sin(v.z / 2) * cos(v.x / 2) - sin(v.y / 2) * cos(v.z / 2) * sin(v.x / 2);\r\n        let ww = cos(v.y / 2) * cos(v.z / 2) * cos(v.x / 2) - sin(v.y / 2) * sin(v.z / 2) * sin(v.x / 2);\r\n        return v4(wx, wy, wz, ww);\r\n    }\r\n\r\n    // 四元数乘法\r\n    private static Multiply(q1: Vec4, q2: Vec4) {\r\n        let w = q1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z;\r\n        let x = q1.w * q2.x + q1.x * q2.w + q1.y * q2.z - q1.z * q2.y;\r\n        let y = q1.w * q2.y + q1.y * q2.w + q1.z * q2.x - q1.x * q2.z;\r\n        let z = q1.w * q2.z + q1.z * q2.w + q1.x * q2.y - q1.y * q2.x;\r\n        return v4(x, y, z, w);\r\n    }\r\n\r\n    // 角度转弧度\r\n    private static ToRadian(a: Vec3) {\r\n        return v3(math.toRadian(a.x), math.toRadian(a.y), math.toRadian(a.z));\r\n    }\r\n\r\n    // 四元数求逆\r\n    private static getInverse(q: Vec4) {\r\n        let mod_square = pow(q.x, 2) + pow(q.y, 2) + pow(q.z, 2) + pow(q.w, 2); // 四元数范数的平方\r\n        let adjoint = v4(-q.x, -q.y, -q.z, q.w); // 共轭四元数\r\n        return adjoint.multiplyScalar(1 / mod_square); // 四元数的逆等于其共轭四元数除以四元数范数的平方\r\n    }\r\n\r\n    // 使用四元数根据给出的欧拉角计算旋转后的向量\r\n    public static QuaternionRotate(v: Vec3, a: Vec3) { // v:被旋转的向量，a:欧拉角\r\n        let qv = v4(v.x, v.y, v.z, 0); // 将三维向量转换为纯四元数\r\n        let qr = Functions.EulerToQuaternion(Functions.ToRadian(a)); // 将欧拉角转换为四元数\r\n        let inverse = Functions.getInverse(qr); // 求出该四元数的逆\r\n        let qv_r = Functions.Multiply(qr, qv); // 计算旋转\r\n        qv_r = Functions.Multiply(qv_r, inverse);\r\n        v = v3(qv_r.x, qv_r.y, qv_r.z); // w=0，直接将x,y,z取出得到旋转后的结果\r\n        return v;\r\n    }\r\n\r\n    // 使用四元数计算旋转后的向量\r\n    public static getRotateVec(v: Vec3, qr: Quat) {\r\n        let qv: Quat = new Quat(v.x, v.y, v.z, 0); // 将三维向量转换为纯四元数\r\n        let invert: Quat = new Quat();\r\n        Quat.invert(invert, qr); // 求出该四元数的逆\r\n        let res: Quat = new Quat();\r\n        Quat.multiply(res, qr, qv); // 计算旋转\r\n        Quat.multiply(res, res, invert);\r\n        v = v3(res.x, res.y, res.z); // w=0，直接将x,y,z取出得到旋转后的结果\r\n        return v;\r\n    }\r\n\r\n    // 将数值约束在区间内，区间默认左闭右闭\r\n    public static normalize(num: number, min: number | null = null, max: number | null = null) {\r\n        if (min) { num = num >= min ? num : min; }\r\n        if (max) { num = num <= max ? num : max; }\r\n        return num;\r\n    }\r\n\r\n    // 从数组中随机取出一定数量的元素\r\n    public static randomFromArray(arr: any[], num: number) {\r\n        if (arr.length <= num) {\r\n            return arr;\r\n        }\r\n        let arr_copy = arr.concat();\r\n        if (arr.length / 2 >= num) { // 如果从数组中摘元素更快，则将指定数量的元素从原数组中取出放入结果数组，最后返回结果数组\r\n            let res_arr = [];\r\n            for (let i = 0; i < num; i++) {\r\n                let index = Math.floor(Math.random() * arr_copy.length);\r\n                res_arr.push(arr_copy.splice(index, 1));\r\n            }\r\n            return res_arr;\r\n        } else { // 否则删除元素直到数组中的元素个数与要取的元素个数一致，而后直接返回原数组\r\n            for (;arr_copy.length > num;) {\r\n                let index = Math.floor(Math.random() * arr_copy.length);\r\n                arr_copy.splice(index, 1);\r\n            }\r\n            return arr_copy;\r\n        }\r\n    }\r\n}\r\n"]}