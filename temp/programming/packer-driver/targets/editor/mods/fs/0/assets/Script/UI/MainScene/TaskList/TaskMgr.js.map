{"version":3,"sources":["file:///E:/GitHub/HelloTK/assets/Script/UI/MainScene/TaskList/TaskMgr.ts"],"names":["_decorator","Component","Configure","Subscribe","ccclass","property","TaskMgr","constructor","name","Map","getTaskProgrss","setTaskConfigure","bind","getInstance","ist","getTaskByCategory","cate","task_map","has","trigger","get","conf","getConfigure","category","tasks","length","forEach","c","task_array","map","task","progress","progress_data","set","setTaskListener","cb","test_progress_data","listen"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node } from 'cc';\r\nimport { Configure } from '../../../Tools/Configure';\r\nimport { Subscribe } from '../../../Tools/Subscribe';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('TaskMgr')\r\nexport class TaskMgr extends Component {\r\n\r\n    private static ist: TaskMgr;\r\n\r\n    private task_map: Map<string, Map<string, any>> = new Map();\r\n    private progress_data: any = null;\r\n\r\n    // ##################################\r\n    private test_progress_data: any = {\r\n        \"task_w_001\": 0,\r\n        \"task_w_002\": 0,\r\n        \"task_w_login_1\": 2,\r\n        \"task_w_login_2\": 2,\r\n        \"task_w_login_3\": 2,\r\n        \"task_w_login_4\": 2\r\n    };\r\n    // ###################################\r\n\r\n    private constructor(name: string) {\r\n        super(name);\r\n        this.getTaskProgrss(this.setTaskConfigure.bind(this));\r\n    }\r\n\r\n    public static getInstance() {\r\n        if (!this.ist) {\r\n            this.ist = new TaskMgr(\"TaskMgr\");\r\n        }\r\n        return this.ist;\r\n    }\r\n\r\n    public getTaskByCategory(cate: string) {\r\n        if (!this.task_map.has(cate)) {\r\n            Subscribe.trigger(\"log err\", \"Task don't have category named \\'\" + cate + \"\\'.\");\r\n        }\r\n        return this.task_map.get(cate);\r\n    }\r\n\r\n    private setTaskConfigure() {\r\n        let conf = Configure.getConfigure(\"task\");\r\n        let category = conf[\"category\"];\r\n        let tasks = conf[\"tasks\"];\r\n        if (category && category.length && category.length > 1) {\r\n            category.forEach((c: string) => {\r\n                if (c === \"all\") {\r\n                    return;\r\n                }\r\n                let task_array = tasks[category];\r\n                if (task_array && task_array.length && task_array.length > 0) {\r\n                    let map = new Map<string, any>();\r\n                    task_array.forEach((task: any) => {\r\n                        let progress: number | undefined = this.progress_data[task[\"id\"]];\r\n                        if (!progress) {\r\n                            progress = 0;\r\n                        }\r\n                        task[\"progress\"] = progress;\r\n                        map.set(task[\"id\"], task);\r\n                        this.setTaskListener(task);\r\n                    });\r\n                    this.task_map.set(c, map);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private getTaskProgrss(cb: Function) {\r\n        // ###############################################\r\n        this.progress_data = this.test_progress_data;\r\n        // ###############################################\r\n        cb();\r\n    }\r\n\r\n    private setTaskListener(conf: any) {\r\n        Subscribe.listen(conf[\"listen_msg\"], conf[\"id\"], () => {\r\n            conf[\"progress\"]++;\r\n            Subscribe.trigger(\"task progress\", conf);\r\n        });\r\n    }\r\n\r\n    // public t<T extends string, U>(arg1: T, arg2: U): [T, U] { // 泛型\r\n    //     return [arg1, arg2]\r\n    // }\r\n}\r\n"]}