{"version":3,"sources":["file:///E:/GitHub/HelloTK/assets/Script/Tools/TouchScreen.ts"],"names":["_decorator","Component","geometry","Camera","PhysicsSystem","find","input","Input","Subscribe","ccclass","property","Ray","TouchScreen","onLoad","listen","name","scene_name","num","arg","camera_node","mainCamera","getComponent","trigger","on","EventType","TOUCH_START","e","touch","TOUCH_MOVE","TOUCH_END","TOUCH_CANCEL","type","screenPointToRay","getLocationX","getLocationY","touchRay","instance","raycast","res","raycastResults","length","uuid","collider","node"],"mappings":"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","sourcesContent":["import { _decorator, Component, EventTouch, geometry, Camera, PhysicsSystem, find, input, Input } from 'cc';\r\nimport { Subscribe } from './Subscribe';\r\nconst { ccclass, property } = _decorator;\r\nconst { Ray } = geometry;\r\n\r\n@ccclass('TouchScreen')\r\nexport class TouchScreen extends Component {\r\n\r\n    private touchRay = new Ray();\r\n    private mainCamera: Camera | null = null;\r\n\r\n    // ###\r\n    private touch_flag: string = \"\";\r\n\r\n    onLoad() {\r\n        Subscribe.listen(\"change scene\", this.name, (scene_name: string, num: number, ...arg: any[]) => {\r\n            let camera_node = find(\"Main Camera\");\r\n            if (camera_node) { this.mainCamera = camera_node.getComponent(Camera); }\r\n            else { this.mainCamera = null; Subscribe.trigger(\"log err\", \"Can't find camera node!\"); }\r\n        });\r\n        input.on(Input.EventType.TOUCH_START, (e) => { this.touch(e, \"start\"); }, this);\r\n        input.on(Input.EventType.TOUCH_MOVE, (e) => { this.touch(e, \"move\"); }, this);\r\n        input.on(Input.EventType.TOUCH_END, (e) => { this.touch(e, \"end\"); }, this);\r\n        input.on(Input.EventType.TOUCH_CANCEL, (e) => { this.touch(e, \"end\"); }, this);\r\n    }\r\n\r\n    touch(e: EventTouch, type: string) {\r\n        if (!this.mainCamera) {\r\n            Subscribe.trigger(\"t_\" + type + \"_2d\", e);\r\n            return;\r\n        }\r\n        this.mainCamera.screenPointToRay(e.getLocationX(), e.getLocationY(), this.touchRay);\r\n        if (PhysicsSystem.instance.raycast(this.touchRay)) {\r\n            let res = PhysicsSystem.instance.raycastResults;\r\n            if (res.length <= 0) { return; }\r\n            let uuid = res[0].collider.node.uuid;\r\n            Subscribe.trigger(\"t_\" + type + uuid, e);\r\n        }\r\n    }\r\n}\r\n"]}