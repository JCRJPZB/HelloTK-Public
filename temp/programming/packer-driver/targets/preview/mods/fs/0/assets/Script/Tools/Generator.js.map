{"version":3,"sources":["file:///E:/GitHub/HelloTK/assets/Script/Tools/Generator.ts"],"names":["_decorator","Component","Prefab","instantiate","ResMgr","Subscribe","ccclass","property","Generator","getInstance","ist","constructor","name","Map","loadDir","prefabs","length","trigger","forEach","p","prefab_map","set","data","_name","listen","generator","parent","pos","new_node","getObject","setPosition","prefab","get"],"mappings":";;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAiBC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,W,OAAAA,W;;AACrCC,MAAAA,M,iBAAAA,M;;AACAC,MAAAA,S,iBAAAA,S;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBP,U;;2BAGjBQ,S,WADZF,OAAO,CAAC,WAAD,C,mCAAR,MACaE,SADb,SAC+BP,SAD/B,CACyC;AAKZ,eAAXQ,WAAW,GAAc;AACnC,cAAI,CAACD,SAAS,CAACE,GAAf,EAAoB;AAAEF,YAAAA,SAAS,CAACE,GAAV,GAAgB,IAAIF,SAAJ,CAAc,WAAd,CAAhB;AAA6C;;AACnE,iBAAOA,SAAS,CAACE,GAAjB;AACH;;AAEOC,QAAAA,WAAW,CAACC,IAAD,EAAe;AAC9B,gBAAMA,IAAN;;AAD8B,8CARQ,IAAIC,GAAJ,EAQR;;AAE9B;AAAA;AAAA,gCAAOC,OAAP,CAAe,QAAf,EAAyB,GAAzB,EAA8BZ,MAA9B,EAAuCa,OAAD,IAAuB;AAAE;AAC3D,gBAAIA,OAAO,CAACC,MAAR,GAAiB,CAArB,EAAwB;AACpB;AAAA;AAAA,0CAAUC,OAAV,CAAkB,WAAlB,EAA+B,YAA/B;AACA;AACH;;AACDF,YAAAA,OAAO,CAACG,OAAR,CAAgBC,CAAC,IAAI;AAAE,mBAAKC,UAAL,CAAgBC,GAAhB,CAAoBF,CAAC,CAACG,IAAF,CAAOC,KAA3B,EAAkCJ,CAAlC;AAAuC,aAA9D,EALyD,CAKQ;;AACjE;AAAA;AAAA,wCAAUF,OAAV,CAAkB,iBAAlB;AACH,WAPD;AAQA;AAAA;AAAA,sCAAUO,MAAV,CAAiB,kBAAjB,EAAqC,KAAKZ,IAA1C,EAAgD,KAAKa,SAArD,EAAgE,IAAhE;AACH;;AAEMA,QAAAA,SAAS,CAACC,MAAD,EAAed,IAAf,EAA6Be,GAA7B,EAAyC;AAAE;AACvD,cAAIC,QAAQ,GAAG,KAAKC,SAAL,CAAejB,IAAf,CAAf;;AACA,cAAI,CAACgB,QAAL,EAAe;AAAE,mBAAO,IAAP;AAAc;;AAC/BA,UAAAA,QAAQ,CAACF,MAAT,GAAkBA,MAAlB,CAHqD,CAG3B;;AAC1B,cAAIC,GAAJ,EAAS;AAAEC,YAAAA,QAAQ,CAACE,WAAT,CAAqBH,GAArB;AAA4B,WAJc,CAIb;;;AACxC,iBAAOC,QAAP;AACH;;AAEMC,QAAAA,SAAS,CAACjB,IAAD,EAAe;AAAE;AAC7B,cAAImB,MAAM,GAAG,KAAKX,UAAL,CAAgBY,GAAhB,CAAoBpB,IAApB,CAAb;;AACA,cAAI,CAACmB,MAAL,EAAa;AACT;AAAA;AAAA,wCAAUd,OAAV,CAAkB,SAAlB,EAA6B,cAAcL,IAAd,GAAqB,mBAAlD;AACA,mBAAO,IAAP;AACH;;AACD,iBAAOT,WAAW,CAAC4B,MAAD,CAAlB;AACH;;AAtCoC,O,kCAGE,I","sourcesContent":["import { _decorator, Component, Node, Prefab, instantiate, Vec3 } from 'cc';\r\nimport { ResMgr } from './ResMgr';\r\nimport { Subscribe } from './Subscribe';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('Generator')\r\nexport class Generator extends Component {\r\n\r\n    private prefab_map: Map<string, Prefab> = new Map();\r\n    private static ist: Generator | null = null;\r\n\r\n    public static getInstance(): Generator {\r\n        if (!Generator.ist) { Generator.ist = new Generator(\"Generator\"); }\r\n        return Generator.ist;\r\n    }\r\n\r\n    private constructor(name: string) {\r\n        super(name);\r\n        ResMgr.loadDir(\"Prefab\", \"/\", Prefab, (prefabs: Prefab[]) => { // 加载全部预制体\r\n            if (prefabs.length < 1) {\r\n                Subscribe.trigger(\"alert err\", \"No prefabs\");\r\n                return;\r\n            }\r\n            prefabs.forEach(p => { this.prefab_map.set(p.data._name, p); }); // 用预制体名作key，写配置需注意重名\r\n            Subscribe.trigger(\"Generator ready\");\r\n        });\r\n        Subscribe.listen(\"Generator prefab\", this.name, this.generator, this);\r\n    }\r\n\r\n    public generator(parent: Node, name: string, pos?: Vec3) { // parent: 父节点， name: 预制体名称\r\n        let new_node = this.getObject(name);\r\n        if (!new_node) { return null; }\r\n        new_node.parent = parent; // 放入父节点\r\n        if (pos) { new_node.setPosition(pos); } // 设置位置\r\n        return new_node;\r\n    }\r\n\r\n    public getObject(name: string) { // 获取预制体实例化对象\r\n        let prefab = this.prefab_map.get(name);\r\n        if (!prefab) {\r\n            Subscribe.trigger(\"log err\", \"Prefab \\'\" + name + \"\\' doesn't exist.\");\r\n            return null;\r\n        }\r\n        return instantiate(prefab);\r\n    }\r\n}\r\n"]}