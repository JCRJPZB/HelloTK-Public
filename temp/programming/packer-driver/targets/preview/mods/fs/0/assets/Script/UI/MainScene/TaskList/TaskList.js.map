{"version":3,"sources":["file:///E:/GitHub/HelloTK/assets/Script/UI/MainScene/TaskList/TaskList.ts"],"names":["_decorator","Generator","Subscribe","UIBase","Task","TaskMgr","ccclass","property","TaskList","onInit","addClickEvent","trigger","task_root","getNode","listen","name","showTasksByCategory","onOpen","cate","curr_cate","task_map","getInstance","getTaskByCategory","removeAllChildren","forEach","conf","key","map","genTask","pre_task","get","task_node","generator","ctrl","getComponent","init_task"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;;AACAC,MAAAA,S,iBAAAA,S;;AACAC,MAAAA,S,iBAAAA,S;;AACAC,MAAAA,M,iBAAAA,M;;AACAC,MAAAA,I,iBAAAA,I;;AACAC,MAAAA,O,iBAAAA,O;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBP,U;;0BAGjBQ,Q,WADZF,OAAO,CAAC,UAAD,C,yBAAR,MACaE,QADb;AAAA;AAAA,4BACqC;AAAA;AAAA;;AAAA;;AAAA,6CAGL,EAHK;AAAA;;AAKjCC,QAAAA,MAAM,GAAG;AACL,eAAKC,aAAL,CAAmB,QAAnB,EAA6B,MAAM;AAC/B;AAAA;AAAA,wCAAUC,OAAV,CAAkB,cAAlB;AACH,WAFD,EAEG,IAFH;AAGA,eAAKC,SAAL,GAAiB,KAAKC,OAAL,CAAa,cAAb,CAAjB;AACA;AAAA;AAAA,sCAAUC,MAAV,CAAiB,wBAAjB,EAA2C,KAAKC,IAAhD,EAAsD,KAAKC,mBAA3D,EAAgF,IAAhF;AACH;;AAEDC,QAAAA,MAAM,GAAG;AACL,eAAKD,mBAAL,CAAyB,KAAzB;AACH;;AAEOA,QAAAA,mBAAmB,CAACE,IAAD,EAAe;AACtC,cAAIA,IAAI,KAAK,KAAKC,SAAlB,EAA6B;AACzB;AACH;;AACD,eAAKA,SAAL,GAAiBD,IAAjB;AACA,cAAIE,QAAsC,GAAG;AAAA;AAAA,kCAAQC,WAAR,GAAsBC,iBAAtB,CAAwCJ,IAAxC,CAA7C;;AACA,cAAIE,QAAJ,EAAc;AAAA;;AACV,oCAAKR,SAAL,oEAAgBW,iBAAhB;AACAH,YAAAA,QAAQ,CAACI,OAAT,CAAiB,CAACC,IAAD,EAAYC,GAAZ,EAAyBC,GAAzB,KAAmD;AAChE,mBAAKC,OAAL,CAAaH,IAAb,EAAmBE,GAAnB;AACH,aAFD;AAGH;AACJ;;AAEOC,QAAAA,OAAO,CAACH,IAAD,EAAYE,GAAZ,EAAmC;AAC9C,cAAIF,IAAI,CAAC,UAAD,CAAR,EAAsB;AAClB,gBAAII,QAAQ,GAAGF,GAAG,CAACG,GAAJ,CAAQL,IAAI,CAAC,UAAD,CAAZ,CAAf;;AACA,gBAAII,QAAQ,IAAI,CAACA,QAAQ,CAAC,SAAD,CAAzB,EAAsC;AAAE;AACpC;AACH;AACJ;;AACD,cAAI,KAAKjB,SAAT,EAAoB;AAChB,gBAAImB,SAAS,GAAG;AAAA;AAAA,wCAAUV,WAAV,GAAwBW,SAAxB,CAAkC,KAAKpB,SAAvC,EAAkD,MAAlD,CAAhB;AACA,gBAAIqB,IAAI,GAAGF,SAAH,aAAGA,SAAH,uBAAGA,SAAS,CAAEG,YAAX;AAAA;AAAA,6BAAX;;AACA,gBAAID,IAAJ,EAAU;AACNA,cAAAA,IAAI,CAACE,SAAL,CAAeV,IAAf;AACH;AACJ;AACJ;;AA7CgC,O","sourcesContent":["import { _decorator, Node } from 'cc';\r\nimport { Generator } from '../../../Tools/Generator';\r\nimport { Subscribe } from '../../../Tools/Subscribe';\r\nimport { UIBase } from '../../UIBase';\r\nimport { Task } from './Task';\r\nimport { TaskMgr } from './TaskMgr';\r\nconst { ccclass, property } = _decorator;\r\n \r\n@ccclass('TaskList')\r\nexport class TaskList extends UIBase {\r\n\r\n    private task_root: Node | undefined;\r\n    private curr_cate: string = \"\";\r\n\r\n    onInit() {\r\n        this.addClickEvent(\"Return\", () => {\r\n            Subscribe.trigger(\"go back page\");\r\n        }, this);\r\n        this.task_root = this.getNode(\"Task_Content\");\r\n        Subscribe.listen(\"show tasks by category\", this.name, this.showTasksByCategory, this);\r\n    }\r\n\r\n    onOpen() {\r\n        this.showTasksByCategory(\"all\");\r\n    }\r\n\r\n    private showTasksByCategory(cate: string) {\r\n        if (cate === this.curr_cate) {\r\n            return;\r\n        }\r\n        this.curr_cate = cate;\r\n        let task_map: Map<string, any> | undefined = TaskMgr.getInstance().getTaskByCategory(cate);\r\n        if (task_map) {\r\n            this.task_root?.removeAllChildren();\r\n            task_map.forEach((conf: any, key: string, map: Map<string, any>) => {\r\n                this.genTask(conf, map);\r\n            });\r\n        }\r\n    }\r\n\r\n    private genTask(conf: any, map: Map<string, any>) {\r\n        if (conf[\"pre_task\"]) {\r\n            let pre_task = map.get(conf[\"pre_task\"]);\r\n            if (pre_task && !pre_task[\"is_done\"]) { // 如果有前置任务并且前置任务未完成\r\n                return;\r\n            }\r\n        }\r\n        if (this.task_root) {\r\n            let task_node = Generator.getInstance().generator(this.task_root, \"Task\");\r\n            let ctrl = task_node?.getComponent(Task);\r\n            if (ctrl) {\r\n                ctrl.init_task(conf);\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}