{"version":3,"sources":["file:///E:/GitHub/HelloTK/assets/Script/UI/UIContainer.ts"],"names":["_decorator","Component","Button","Label","Sprite","EditBox","ProgressBar","Subscribe","ccclass","property","comTypes","UIContainer","constructor","Map","compCache","mapBtn","mapLabel","mapSprite","mapEditBox","mapProgressBar","getNode","key","mapNode","get","getComp","type","mapCom","trigger","find","rootN","name","set","ComType","Comp","getComponent","mapComp","arrChild","children","node"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAiBC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,O,OAAAA,O;AAASC,MAAAA,W,OAAAA,W;;AAC7DC,MAAAA,S,iBAAAA,S;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBT,U;AAE1BU,MAAAA,Q,GAAgB;AAChB,kBAAUR,MADM;AAEhB,iBAASC,KAFO;AAGhB,kBAAUC,MAHM;AAIhB,mBAAWC,OAJK;AAKhB,uBAAeC;AALC,O;;6BASPK,W,WADZH,OAAO,CAAC,aAAD,C,yBAAR,MACaG,WADb,SACiCV,SADjC,CAC2C;AAUvCW,QAAAA,WAAW,GAAG;AACV;;AADU,2CARsB,IAAIC,GAAJ,EAQtB;;AAAA,0CAPuB,IAAIA,GAAJ,EAOvB;;AAAA,4CANwB,IAAIA,GAAJ,EAMxB;;AAAA,6CAL0B,IAAIA,GAAJ,EAK1B;;AAAA,8CAJ4B,IAAIA,GAAJ,EAI5B;;AAAA,kDAHoC,IAAIA,GAAJ,EAGpC;;AAAA,6CAFW,IAEX;;AAEV,eAAKC,SAAL,GAAiB;AACb,sBAAU,KAAKC,MADF;AAEb,qBAAS,KAAKC,QAFD;AAGb,sBAAU,KAAKC,SAHF;AAIb,uBAAW,KAAKC,UAJH;AAKb,2BAAe,KAAKC;AALP,WAAjB;AAOH;;AAEMC,QAAAA,OAAO,CAACC,GAAD,EAAc;AACxB,iBAAO,KAAKC,OAAL,CAAaC,GAAb,CAAiBF,GAAjB,CAAP;AACH;;AAEMG,QAAAA,OAAO,CAACH,GAAD,EAAcI,IAAd,EAA4B;AACtC,cAAIC,MAAM,GAAG,KAAKZ,SAAL,CAAeW,IAAf,CAAb;;AACA,cAAI,CAACC,MAAL,EAAa;AACT;AAAA;AAAA,wCAAUC,OAAV,CAAkB,SAAlB,EAA6B,gCAAgCF,IAAhC,GAAuC,KAApE;AACA,mBAAO,IAAP;AACH;;AACD,iBAAOC,MAAM,CAACH,GAAP,CAAWF,GAAX,CAAP;AACH;;AAEMO,QAAAA,IAAI,CAACC,KAAD,EAAc;AACrB,cAAI,CAACA,KAAL,EAAY;AACR;AAAA;AAAA,wCAAUF,OAAV,CAAkB,SAAlB,EAA6B,4BAA7B;AACA;AACH;;AACD,cAAIG,IAAI,GAAGD,KAAK,CAACC,IAAjB;AACA,eAAKR,OAAL,CAAaS,GAAb,CAAiBD,IAAjB,EAAuBD,KAAvB,EANqB,CAOrB;;AACA,eAAK,IAAIR,GAAT,IAAgB,KAAKP,SAArB,EAAgC;AAC5B;AACA,gBAAIkB,OAAO,GAAGtB,QAAQ,CAACW,GAAD,CAAtB,CAF4B,CAG5B;;AACA,gBAAIY,IAAI,GAAGJ,KAAK,CAACK,YAAN,CAAmBF,OAAnB,CAAX;;AACA,gBAAIC,IAAJ,EAAU;AACN;AACA,kBAAIE,OAAO,GAAG,KAAKrB,SAAL,CAAeO,GAAf,CAAd,CAFM,CAGN;;AACAc,cAAAA,OAAO,CAACJ,GAAR,CAAYD,IAAZ,EAAkBG,IAAlB;AACH;AACJ;;AACD,cAAIG,QAAQ,GAAGP,KAAK,CAACQ,QAArB;;AACA,eAAK,IAAIC,IAAT,IAAiBF,QAAjB,EAA2B;AACvB,iBAAKR,IAAL,CAAUU,IAAV;AACH;AACJ;;AA1DsC,O","sourcesContent":["import { _decorator, Component, Node, Button, Label, Sprite, EditBox, ProgressBar } from 'cc';\r\nimport { Subscribe } from '../Tools/Subscribe';\r\nconst { ccclass, property } = _decorator;\r\n\r\nlet comTypes: any = {\r\n    'Button': Button,\r\n    'Label': Label,\r\n    'Sprite': Sprite,\r\n    'EditBox': EditBox,\r\n    \"ProgressBar\": ProgressBar\r\n}\r\n\r\n@ccclass('UIContainer')\r\nexport class UIContainer extends Component {\r\n\r\n    public mapNode: Map<string, Node> = new Map();\r\n    public mapBtn: Map<string, Button> = new Map();\r\n    public mapLabel: Map<string, Label> = new Map();\r\n    public mapSprite: Map<string, Sprite> = new Map();\r\n    public mapEditBox: Map<string, EditBox> = new Map();\r\n    public mapProgressBar: Map<string, ProgressBar> = new Map();\r\n    private compCache: any = null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.compCache = {\r\n            'Button': this.mapBtn,\r\n            'Label': this.mapLabel,\r\n            'Sprite': this.mapSprite,\r\n            'EditBox': this.mapEditBox,\r\n            \"ProgressBar\": this.mapProgressBar\r\n        }\r\n    }\r\n\r\n    public getNode(key: string) {\r\n        return this.mapNode.get(key);\r\n    }\r\n\r\n    public getComp(key: string, type: string) {\r\n        let mapCom = this.compCache[type];\r\n        if (!mapCom) {\r\n            Subscribe.trigger(\"log err\", \"Can't find ui type named \\'\" + type + \"\\'.\");\r\n            return null;\r\n        }\r\n        return mapCom.get(key);\r\n    }\r\n\r\n    public find(rootN: Node) {\r\n        if (!rootN) {\r\n            Subscribe.trigger(\"log err\", \"Node is null or undefined!\");\r\n            return;\r\n        }\r\n        let name = rootN.name;\r\n        this.mapNode.set(name, rootN);\r\n        //要把该节点下到所有组件初始化到相应到Map中\r\n        for (let key in this.compCache) {\r\n            //组件类型\r\n            let ComType = comTypes[key];\r\n            //获取组件\r\n            let Comp = rootN.getComponent(ComType);\r\n            if (Comp) {\r\n                //取组件到容器如:this.mapBtn\r\n                let mapComp = this.compCache[key];\r\n                //将组件存到相应到组件map中\r\n                mapComp.set(name, Comp);\r\n            }\r\n        }\r\n        let arrChild = rootN.children;\r\n        for (let node of arrChild) {\r\n            this.find(node);\r\n        }\r\n    }\r\n}\r\n"]}