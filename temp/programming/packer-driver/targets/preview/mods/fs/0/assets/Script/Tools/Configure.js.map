{"version":3,"sources":["file:///E:/GitHub/HelloTK/assets/Script/Tools/Configure.ts"],"names":["_decorator","Component","JsonAsset","game","ResMgr","Subscribe","ccclass","property","Configure","onLoad","listen","name","init","addPersistRootNode","node","loadDir","res","length","trigger","forEach","json","setting_dict","set","loaded","getConfigure","mod_name","size","get","Map"],"mappings":";;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,I,OAAAA,I;;AAClCC,MAAAA,M,iBAAAA,M;;AACAC,MAAAA,S,iBAAAA,S;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBP,U;;2BAGjBQ,S,WADZF,OAAO,CAAC,WAAD,C,mCAAR,MACaE,SADb,SAC+BP,SAD/B,CACyC;AAKrCQ,QAAAA,MAAM,GAAG;AACL;AAAA;AAAA,sCAAUC,MAAV,CAAiB,kBAAjB,EAAqC,KAAKC,IAA1C,EAAgDH,SAAS,CAACI,IAA1D,EAAgE,IAAhE;AACAT,UAAAA,IAAI,CAACU,kBAAL,CAAwB,KAAKC,IAA7B;AACH;;AAEkB,eAAJF,IAAI,GAAG;AAClB;AAAA;AAAA,gCAAOG,OAAP,CAAe,WAAf,EAA4B,SAA5B,EAAuCb,SAAvC,EAAmDc,GAAD,IAAsB;AAAE;AACtE,gBAAI,CAACA,GAAD,IAAQA,GAAG,CAACC,MAAJ,GAAa,CAAzB,EAA4B;AAAE;AAAA;AAAA,0CAAUC,OAAV,CAAkB,WAAlB,EAA+B,gBAA/B;AAAkD;AAAS;;AACzFF,YAAAA,GAAG,CAACG,OAAJ,CAAYC,IAAI,IAAI;AAACZ,cAAAA,SAAS,CAACa,YAAV,CAAuBC,GAAvB,CAA2BF,IAAI,CAACT,IAAhC,EAAsCS,IAAI,CAACA,IAA3C;AAAmD,aAAxE,EAFoE,CAEO;;AAC3EZ,YAAAA,SAAS,CAACe,MAAV,GAAmB,IAAnB,CAHoE,CAG3C;;AACzB;AAAA;AAAA,wCAAUL,OAAV,CAAkB,iBAAlB,EAJoE,CAI9B;AACzC,WALD;AAMH;;AAEyB,eAAZM,YAAY,CAACC,QAAD,EAAmB;AACzC,cAAI,CAACjB,SAAS,CAACe,MAAf,EAAuB;AAAE;AACrB;AAAA;AAAA,wCAAUL,OAAV,CAAkB,WAAlB,EAA+B,iBAAiBO,QAAjB,GAA4B,8BAA3D;AACA,mBAAO,IAAP;AACH;;AACD,cAAIjB,SAAS,CAACa,YAAV,CAAuBK,IAAvB,GAA8B,CAAlC,EAAqC;AACjC;AAAA;AAAA,wCAAUR,OAAV,CAAkB,WAAlB,EAA+B,kBAAkBO,QAAlB,GAA6B,8BAA5D;AACA,mBAAO,IAAP;AACH;;AACD,cAAI,CAACjB,SAAS,CAACa,YAAV,CAAuBM,GAAvB,CAA2BF,QAA3B,CAAL,EAA2C;AAAE;AACzC;AAAA;AAAA,wCAAUP,OAAV,CAAkB,WAAlB,EAA+B,qCAAqCO,QAArC,GAAgD,GAA/E;AACA,mBAAO,IAAP;AACH;;AACD,iBAAOjB,SAAS,CAACa,YAAV,CAAuBM,GAAvB,CAA2BF,QAA3B,CAAP;AACH;;AAjCoC,O,2CAEW,IAAIG,GAAJ,E,sCACf,K","sourcesContent":["import { _decorator, Component, JsonAsset, game } from 'cc';\r\nimport { ResMgr } from './ResMgr';\r\nimport { Subscribe } from './Subscribe';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('Configure')\r\nexport class Configure extends Component {\r\n\r\n    private static setting_dict: Map<string, any> = new Map();\r\n    private static loaded: boolean = false;\r\n\r\n    onLoad() {\r\n        Subscribe.listen(\"resources loaded\", this.name, Configure.init, this);\r\n        game.addPersistRootNode(this.node);\r\n    }\r\n\r\n    private static init() {\r\n        ResMgr.loadDir(\"resources\", \"/config\", JsonAsset, (res: JsonAsset[]) => { // 加载全部配置文件\r\n            if (!res || res.length < 1) { Subscribe.trigger(\"alert err\", \"未知错误，配置未能成功加载！\"); return; }\r\n            res.forEach(json => {Configure.setting_dict.set(json.name, json.json); }); // 存\r\n            Configure.loaded = true; // 更改标志\r\n            Subscribe.trigger(\"settings loaded\"); // 配置加载完毕, 发射消息\r\n        });\r\n    }\r\n\r\n    public static getConfigure(mod_name: string) {\r\n        if (!Configure.loaded) { // 若设置尚未加载完毕\r\n            Subscribe.trigger(\"alert err\", \"Settings: \\'\" + mod_name + \"\\' have not been loaded yet!\");\r\n            return null;\r\n        }\r\n        if (Configure.setting_dict.size < 1) {\r\n            Subscribe.trigger(\"alert err\", \"Configure: \\'\" + mod_name + \"\\' have not been loaded yet!\");\r\n            return null;\r\n        }\r\n        if (!Configure.setting_dict.get(mod_name)) { // 如果没有找到参数对应的设置\r\n            Subscribe.trigger(\"alert err\", \"Configure don't have this part: \" + mod_name + \".\");\r\n            return null;\r\n        }\r\n        return Configure.setting_dict.get(mod_name);\r\n    }\r\n}"]}