{"version":3,"sources":["file:///E:/GitHub/HelloTK/assets/Script/BattleField/Monster/MonsterMgr.ts"],"names":["_decorator","Component","Configure","Functions","ccclass","property","MonsterMgr","constructor","name","Map","conf","getConfigure","forEach","mst","conf_map","set","getInstance","ist","getMonsterAttr","data","deepCopy","get","JSON","parse","stringify"],"mappings":";;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;;AACZC,MAAAA,S,iBAAAA,S;;AACAC,MAAAA,S,iBAAAA,S;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBL,U;;4BAGjBM,U,WADZF,OAAO,CAAC,YAAD,C,mCAAR,MACaE,UADb,SACgCL,SADhC,CAC0C;AAM9BM,QAAAA,WAAW,CAACC,IAAD,EAAe;AAC9B,gBAAMA,IAAN;;AAD8B;;AAAA,4CAFG,IAAIC,GAAJ,EAEH;;AAE9B,eAAKC,IAAL,GAAY;AAAA;AAAA,sCAAUC,YAAV,CAAuB,UAAvB,CAAZ;;AACA,cAAI,KAAKD,IAAT,EAAe;AACX,iBAAKA,IAAL,CAAU,UAAV,EAAsBE,OAAtB,CAA+BC,GAAD,IAAc;AAAE;AAC1C,mBAAKC,QAAL,CAAcC,GAAd,CAAkBF,GAAG,CAAC,IAAD,CAArB,EAA6BA,GAA7B;AACH,aAFD;AAGH;AACJ;;AAEwB,eAAXG,WAAW,GAAG;AACxB,cAAI,CAACV,UAAU,CAACW,GAAhB,EAAqB;AAAEX,YAAAA,UAAU,CAACW,GAAX,GAAiB,IAAIX,UAAJ,CAAe,YAAf,CAAjB;AAAgD;;AACvE,iBAAOA,UAAU,CAACW,GAAlB;AACH;;AAEMC,QAAAA,cAAc,CAACC,IAAD,EAAY;AAC7B,cAAIT,IAAI,GAAG;AAAA;AAAA,sCAAUU,QAAV,CAAmB,KAAKN,QAAL,CAAcO,GAAd,CAAkBF,IAAI,CAAC,QAAD,CAAtB,CAAnB,CAAX;;AACA,cAAI,CAACT,IAAL,EAAW;AAAE,mBAAO,IAAP;AAAa;;AAC1BA,UAAAA,IAAI,CAAC,IAAD,CAAJ,GAAaA,IAAI,CAAC,SAAD,CAAJ,GAAkBS,IAAI,CAAC,IAAD,CAAJ,GAAaT,IAAI,CAAC,WAAD,CAAJ,CAAkB,IAAlB,CAA5C,CAH6B,CAGwC;;AACrEA,UAAAA,IAAI,CAAC,KAAD,CAAJ,GAAcA,IAAI,CAAC,UAAD,CAAJ,GAAmBS,IAAI,CAAC,IAAD,CAAJ,GAAaT,IAAI,CAAC,WAAD,CAAJ,CAAkB,KAAlB,CAA9C;AACAA,UAAAA,IAAI,CAAC,KAAD,CAAJ,GAAcA,IAAI,CAAC,UAAD,CAAJ,GAAmBS,IAAI,CAAC,IAAD,CAAJ,GAAaT,IAAI,CAAC,WAAD,CAAJ,CAAkB,KAAlB,CAA9C;AACAA,UAAAA,IAAI,CAAC,KAAD,CAAJ,GAAcY,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeL,IAAI,CAAC,KAAD,CAAnB,CAAX,CAAd;AACAT,UAAAA,IAAI,CAAC,IAAD,CAAJ,GAAaY,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeL,IAAI,CAAC,IAAD,CAAnB,CAAX,CAAb,CAP6B,CAOwB;;AACrD,iBAAOT,IAAP;AACH;;AA9BqC,O","sourcesContent":["import { _decorator, Component, Node } from 'cc';\r\nimport { Configure } from '../../Tools/Configure';\r\nimport { Functions } from '../../Tools/Functions';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('MonsterMgr')\r\nexport class MonsterMgr extends Component {\r\n\r\n    private static ist: MonsterMgr;\r\n    private conf: any;\r\n    private conf_map: Map<string, any> = new Map();\r\n\r\n    private constructor(name: string) {\r\n        super(name);\r\n        this.conf = Configure.getConfigure(\"monsters\");\r\n        if (this.conf) {\r\n            this.conf[\"monsters\"].forEach((mst: any) => { // 初始化时读取怪物配置\r\n                this.conf_map.set(mst[\"id\"], mst);\r\n            });\r\n        }\r\n    }\r\n\r\n    public static getInstance() {\r\n        if (!MonsterMgr.ist) { MonsterMgr.ist = new MonsterMgr(\"MonsterMgr\"); }\r\n        return MonsterMgr.ist;\r\n    }\r\n\r\n    public getMonsterAttr(data: any) {\r\n        let conf = Functions.deepCopy(this.conf_map.get(data[\"mst_id\"]));\r\n        if (!conf) { return null;}\r\n        conf[\"hp\"] = conf[\"base_hp\"] + data[\"lv\"] * conf[\"grow_rate\"][\"hp\"]; // 根据实际关卡数据以及配置计算怪物数值\r\n        conf[\"atk\"] = conf[\"base_atk\"] + data[\"lv\"] * conf[\"grow_rate\"][\"atk\"];\r\n        conf[\"def\"] = conf[\"base_def\"] + data[\"lv\"] * conf[\"grow_rate\"][\"def\"];\r\n        conf[\"pos\"] = JSON.parse(JSON.stringify(data[\"pos\"]));\r\n        conf[\"id\"] = JSON.parse(JSON.stringify(data[\"id\"])); // 注意怪物的种类ID与实际场上怪物的ID之区别\r\n        return conf;\r\n    }\r\n}\r\n"]}