{"version":3,"sources":["file:///E:/GitHub/HelloTK/assets/Script/Tools/MoveCamera.ts"],"names":["_decorator","Component","Camera","geometry","find","PhysicsSystem","Vec3","v3","Input","input","Configure","Subscribe","ccclass","property","Ray","MoveCamera","constructor","name","conf","getConfigure","listen","disableMove","changeScene","enableMove","getInstance","ist","on","EventType","TOUCH_START","onTouchStart","TOUCH_MOVE","onTouchMove","TOUCH_CANCEL","onTouchEnd","TOUCH_END","off","scene_name","num","data","curr_conf","trigger","max_x","min_x","max_z","min_z","scale","max_scale","min_scale","camera_node","camera","getComponent","safe_area","e","t_num","getAllTouches","length","rayCast","touch_dist","getLocation","subtract","touchs","dist","scaleScene","node","getPosition","pos","temp_x","x","getDeltaX","temp_z","z","getDeltaY","setPosition","type","screenPointToRay","getLocationX","getLocationY","ray","instance","raycast","res","raycastResults","collider","uuid","rate","curr_scale","setScale"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Camera, geometry, find, EventTouch, PhysicsSystem, Vec3, v3, Input, input } from 'cc';\r\nimport { Configure } from './Configure';\r\nimport { Subscribe } from './Subscribe';\r\nconst { ccclass, property } = _decorator;\r\nconst { Ray } = geometry;\r\n\r\n@ccclass('MoveCamera')\r\nexport class MoveCamera extends Component {\r\n\r\n    private static ist: MoveCamera;\r\n\r\n    private conf: any; // 各个场景拖动摄像头的配置\r\n    private curr_conf: any; // 当前场景拖动摄像头的配置\r\n    private camera: Camera | null = null; // 当前场景的摄像头\r\n    private ray = new Ray(); // 检测碰撞用的射线\r\n    private max_x: number = 0; // 边界\r\n    private min_x: number = 0;\r\n    private max_z: number = 0;\r\n    private min_z: number = 0;\r\n    private pos: Vec3 = new Vec3(); // 摄像头当前位置\r\n    private touch_dist: number = 0; // 双指在屏幕上触点之间的距离\r\n    private scale: number = 1; // 当前缩放比例\r\n    private max_scale: number = 1; // 最大缩放比例\r\n    private min_scale: number = 1; // 最小缩放比例\r\n    private safe_area: Node | null = null; // 整个3D场景的父节点(缩放用，但私以为这么做不是一个好方案)\r\n\r\n    private constructor(name: string) {\r\n        super(name);\r\n        this.conf = Configure.getConfigure(\"base\")[\"camera_move\"]; // 读取配置文件\r\n\r\n        Subscribe.listen(\"start load scene\", this.name, this.disableMove, this);\r\n        Subscribe.listen(\"change scene\", this.name, this.changeScene, this); // 监听切换场景消息\r\n        Subscribe.listen(\"continue move camera\", this.name, this.enableMove, this);\r\n        Subscribe.listen(\"stop move camera\", this.name, this.disableMove, this);\r\n        this.changeScene(\"StartScene\", 1, null); // 第一次进入游戏\r\n    }\r\n\r\n    public static getInstance() { // 获取单例\r\n        if (!MoveCamera.ist) { MoveCamera.ist = new MoveCamera(\"MoveCamera\"); }\r\n        return MoveCamera.ist;\r\n    }\r\n\r\n    private enableMove() {\r\n        input.on(Input.EventType.TOUCH_START, this.onTouchStart, this); // 注册触摸事件\r\n        input.on(Input.EventType.TOUCH_MOVE, this.onTouchMove, this);\r\n        input.on(Input.EventType.TOUCH_CANCEL, this.onTouchEnd, this);\r\n        input.on(Input.EventType.TOUCH_END, this.onTouchEnd, this);\r\n    }\r\n\r\n    private disableMove() {\r\n        input.off(Input.EventType.TOUCH_START, this.onTouchStart, this); // 取消注册触摸事件\r\n        input.off(Input.EventType.TOUCH_MOVE, this.onTouchMove, this);\r\n        input.off(Input.EventType.TOUCH_CANCEL, this.onTouchEnd, this);\r\n        input.off(Input.EventType.TOUCH_END, this.onTouchEnd, this);\r\n    }\r\n\r\n    private changeScene(scene_name: string, num: number, data: any) {\r\n        this.curr_conf = this.conf[scene_name]; // 根据场景名称更改当前配置\r\n        if(!this.curr_conf) {\r\n            Subscribe.trigger(\"log err\", \"Can't find configure named \\'\" + scene_name + \"\\'.\");\r\n            return;\r\n        }\r\n        if (this.curr_conf[\"enable\"]) { this.enableMove(); }\r\n        else { this.disableMove(); }\r\n        this.max_x = this.curr_conf[\"max_x\"];\r\n        this.min_x = this.curr_conf[\"min_x\"];\r\n        this.max_z = this.curr_conf[\"max_z\"];\r\n        this.min_z = this.curr_conf[\"min_z\"];\r\n        this.scale = 1;\r\n        this.max_scale = this.curr_conf[\"max_scale\"];\r\n        this.min_scale = this.curr_conf[\"min_scale\"];\r\n        let camera_node = find(\"Main Camera\"); // 更换到新场景的摄像头\r\n        if (!camera_node) { Subscribe.trigger(\"log err\", \"Can't find Main Camera!\"); return; }\r\n        this.camera = camera_node.getComponent(Camera); // 获取摄像头控件\r\n        this.safe_area = find(\"SafeArea\"); // 获取整个3D场景的父节点\r\n    }\r\n\r\n    private onTouchStart(e: EventTouch) {\r\n        if (!this.curr_conf || !this.curr_conf[\"enable\"] || !this.camera) { return; } // 未配置该场景或未使用移动摄像头功能\r\n        let t_num = e.getAllTouches().length; // 获取手指数量\r\n        if (t_num === 1) { // 一根手指则为移动模式\r\n            if (this.curr_conf[\"ray_cast\"]) { this.rayCast(e, \"start\"); } // 检测射线碰撞，以 触发点击事件\r\n            Subscribe.trigger(\"touch screen start\"); // 发射触摸屏幕事件\r\n        }\r\n        else if (t_num === 2) { // 两根手指则为缩放模式\r\n            // 在触摸开始的时候记录两手指在屏幕上触点间的距离\r\n            this.touch_dist = e.getAllTouches()[0].getLocation().subtract(e.getAllTouches()[1].getLocation()).length();\r\n        }\r\n    }\r\n\r\n    private onTouchMove(e: EventTouch) {\r\n        if (!this.curr_conf || !this.curr_conf[\"enable\"] || !this.camera) { return; } // 未配置该场景或未使用移动摄像头功能\r\n        let t_num = e.getAllTouches().length; // 获取手指数量\r\n        if (t_num === 2) {\r\n            let touchs = e.getAllTouches(); // 获取触点\r\n            let dist: number = touchs[0].getLocation().subtract(touchs[1].getLocation()).length(); // 计算距离\r\n            this.scaleScene(dist / this.touch_dist); // 计算缩放比例并调用缩放方法\r\n            this.touch_dist = dist; // 更新当前缩放比例\r\n        } else if (t_num === 1) {\r\n            this.camera.node.getPosition(this.pos); // 获取初始位置\r\n            let temp_x = this.pos.x - e.getDeltaX() * 0.1; // 根据位移量计算摄像机的位移\r\n            let temp_z = this.pos.z + e.getDeltaY() * 0.1;\r\n            this.pos.x = temp_x > this.max_x ? this.max_x : (temp_x < this.min_x ? this.min_x : temp_x); // 边缘检测\r\n            this.pos.z = temp_z > this.max_z ? this.max_z : (temp_z < this.min_z ? this.min_z : temp_z);\r\n            this.camera.node.setPosition(this.pos); // 应用位移\r\n        }\r\n    }\r\n\r\n    private onTouchEnd(e: EventTouch) {\r\n        if (!this.curr_conf || !this.curr_conf[\"enable\"] || !this.camera) { return; } // 未配置该场景或未使用移动摄像头功能\r\n        if (this.curr_conf[\"ray_cast\"]) { this.rayCast(e, \"end\"); }\r\n        let t_num = e.getAllTouches().length;\r\n        if (t_num <= 1)\r\n            Subscribe.trigger(\"touch screen end\");\r\n    }\r\n\r\n    private rayCast(e: EventTouch, type: string) { // 射线检测\r\n        if (!this.camera) { return; }\r\n        this.camera.screenPointToRay(e.getLocationX(), e.getLocationY(), this.ray); // 发出射线\r\n        if (PhysicsSystem.instance.raycast(this.ray)) { // 检测碰撞\r\n            let res = PhysicsSystem.instance.raycastResults; // 获得检测结果\r\n            if (res.length <= 0) { return; }\r\n            Subscribe.trigger(\"touch_\" + type + res[0].collider.node.uuid); // 发射结果\r\n            Subscribe.trigger(\"touch_\" + type);\r\n        }\r\n    }\r\n\r\n    private scaleScene(rate: number) {\r\n        if (!this.safe_area) { return; }\r\n        let curr_scale = this.scale; // 保存当前比例\r\n        this.scale *= rate; // 缩放\r\n        this.scale = this.scale < this.min_scale ? this.min_scale : this.scale; // 边界检测\r\n        this.scale = this.scale > this.max_scale ? this.max_scale : this.scale;\r\n        if (this.scale != curr_scale * rate) { rate = this.scale / curr_scale; } // 约束\r\n        this.safe_area.setScale(v3(this.scale, this.scale, this.scale)); // 应用缩放\r\n    }\r\n}\r\n"]}