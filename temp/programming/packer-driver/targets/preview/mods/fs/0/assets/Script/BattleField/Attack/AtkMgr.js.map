{"version":3,"sources":["file:///E:/GitHub/HelloTK/assets/Script/BattleField/Attack/AtkMgr.ts"],"names":["_decorator","Component","Functions","Subscribe","HpMgr","DmgCal","ccclass","property","AtkMgr","onLoad","listen","name","start_battle","hero","camp","allies","del","enemies","trigger","getConf","all","node","destroy","remove","unscheduleAllCallbacks","alternate","count","schedule","length","attack","target","target_Eff","hp","getInstance","dmg","calculate","changeHp","id","atkEff","hitEff","play"],"mappings":"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","sourcesContent":["import { _decorator, Component } from 'cc';\r\nimport { Functions } from '../../Tools/Functions';\r\nimport { Subscribe } from '../../Tools/Subscribe';\r\nimport { HpMgr } from '../HP/HpMgr';\r\nimport { DmgCal } from './DmgCal';\r\nimport { Info } from './Info';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('AtkMgr')\r\nexport class AtkMgr extends Component {\r\n\r\n    private allies: Info[] = []; // 友方武将数组\r\n    private enemies: Info[] = []; // 敌方\r\n    private all: Info[] = []; // 穿插合并后的数组\r\n\r\n    onLoad() {\r\n        Subscribe.listen(\"battle is ready\", this.name, this.start_battle, this); // 等待战斗场景初始化完成\r\n        Subscribe.listen(\"hero die\", this.name, (hero: Info) => { // 武将（敌人）阵亡\r\n            // ###############################################\r\n            if (hero.camp === this.allies[0].camp) { // 如果是友方\r\n                Functions.del(this.allies, hero);\r\n            }\r\n            else { // 敌方\r\n                Functions.del(this.enemies, hero);\r\n                Subscribe.trigger(\"defeat enemy\");\r\n                Subscribe.trigger(\"defeat \" + hero.getConf(\"category\"));\r\n            }\r\n            // 测试阶段因为数据都保存在本地，故需要做这个判断\r\n            Functions.del(this.all, hero); // 整体数组也要删除\r\n            // ###############################################\r\n            hero.node.destroy(); // 销毁阵亡的武将节点\r\n        });\r\n        Subscribe.listen(\"battle interrupted\", this.name, () => { // 战斗被中止\r\n            Subscribe.remove(\"hero die\", this.name); // 移除监听\r\n            this.unscheduleAllCallbacks(); // 移除所有计时器\r\n        });\r\n    }\r\n\r\n    private start_battle(allies: Info[], enemies: Info[]) {\r\n        this.allies = allies; // 初始化战斗双方数据\r\n        this.enemies = enemies;\r\n\r\n        // ############################################################################\r\n        // 测试阶段在本地做轮流攻击，采用合并数组的方式实现\r\n        this.all = Functions.alternate(this.allies, this.enemies); // 交替穿插合并敌我武将\r\n        let count = -1;\r\n\r\n        // 本地测试\r\n        this.schedule(() => {\r\n            if (this.allies.length < 1 || this.enemies.length < 1) { // 任意一方人数归零则战斗结束\r\n                this.unscheduleAllCallbacks(); // 战斗结束解除计时器\r\n                Subscribe.trigger(\"battle decided\", false, this.allies.length > this.enemies.length, [true, true, true]); // 分出胜负\r\n                return;\r\n            }\r\n            count = (count + 1) % this.all.length; // 根据长度以及上一位发起攻击的角色下标决定当前发起攻击的角色下标\r\n            this.attack(this.all[count]); // 调用攻击方法\r\n        }, 1.5);\r\n        // ############################################################\r\n    }\r\n\r\n    private attack(hero: Info) {\r\n        let target: Info, target_Eff;\r\n        let hp = HpMgr.getInstance(); // 血量管理\r\n\r\n        if (hero.camp === this.allies[0].camp) { target = this.enemies[0]; } // 寻找攻击对象，测试阶段默认对方数组第一个\r\n        else { target = this.allies[0]; }\r\n\r\n        let dmg = DmgCal.calculate(hero, target); // 计算伤害\r\n        hp.changeHp(target.id, -dmg); // 造成伤害\r\n\r\n        let atkEff = hero.atkEff; // 攻击特效\r\n        target_Eff = target.hitEff; // 受击特效\r\n        if (!atkEff || !target_Eff) { return; }\r\n        atkEff.play(); // 播放特效\r\n        target_Eff.play();\r\n    }\r\n\r\n    // private find_target(hero: Info, troops: Info[]) { // 测试阶段暂不考虑寻敌\r\n\r\n    // }\r\n}\r\n"]}