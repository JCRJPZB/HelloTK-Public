{"version":3,"sources":["file:///E:/GitHub/HelloTK/assets/Script/NetWork/NetWork.ts"],"names":["_decorator","Component","Subscribe","ccclass","property","NetWork","WebSocket","Map","onLoad","ws","onopen","e","console","log","onmessage","event","data","onerror","onclose","scheduleOnce","readyState","OPEN","send","sendMsg","msg","sendFile","file","receiveMsg","params","split","length","trigger","node","nodeDict","get","type","shift","emit"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;;AACZC,MAAAA,S,iBAAAA,S;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBJ,U;;yBAGjBK,O,WADZF,OAAO,CAAC,SAAD,C,yBAAR,MACaE,OADb,SAC6BJ,SAD7B,CACuC;AAAA;AAAA;;AAAA,sCAGX,IAAIK,SAAJ,CAAc,sCAAd,CAHW;;AAAA,4CAIG,IAAIC,GAAJ,EAJH;AAAA;;AAMnCC,QAAAA,MAAM,GAAG;AACL,eAAKC,EAAL,CAAQC,MAAR,GAAiB,UAAUC,CAAV,EAAa;AAC1BC,YAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,GAAG,IAAJ,GAAW,0BAAvB;AACH,WAFD;;AAGA,eAAKF,EAAL,CAAQK,SAAR,GAAoB,UAAUC,KAAV,EAAiB;AACjCH,YAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwBE,KAAK,CAACC,IAA1C;AACAJ,YAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwB,OAAOE,KAAK,CAACC,IAAjD;AACH,WAHD;;AAIA,eAAKP,EAAL,CAAQQ,OAAR,GAAkB,UAAUF,KAAV,EAAiB;AAC/BH,YAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACH,WAFD;;AAGA,eAAKJ,EAAL,CAAQS,OAAR,GAAkB,UAAUH,KAAV,EAAiB;AAC/BH,YAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACH,WAFD;;AAGA,eAAKM,YAAL,CAAkB,MAAM;AACpB,gBAAI,KAAKV,EAAL,CAAQW,UAAR,KAAuBd,SAAS,CAACe,IAArC,EAA2C;AACvC,mBAAKZ,EAAL,CAAQa,IAAR,CAAa,sBAAb;AACH,aAFD,MAGK;AACDV,cAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACH;AACJ,WAPD,EAOG,CAPH,EAdK,CAsBL;AACA;AACH;;AAEDU,QAAAA,OAAO,CAACC,GAAD,EAAc;AACjB,eAAKf,EAAL,CAAQa,IAAR,CAAaE,GAAb;AACH;;AAEDC,QAAAA,QAAQ,CAACC,IAAD,EAA2B;AAC/B,eAAKjB,EAAL,CAAQa,IAAR,CAAaI,IAAb;AACH;;AAEDC,QAAAA,UAAU,CAACH,GAAD,EAAc;AACpB,cAAII,MAAgB,GAAGJ,GAAG,CAACK,KAAJ,CAAU,GAAV,CAAvB,CADoB,CACmB;;AACvC,cAAID,MAAM,CAACE,MAAP,GAAgB,CAApB,EAAuB;AAAE;AAAA;AAAA,wCAAUC,OAAV,CAAkB,WAAlB,EAA+B,6BAA/B;AAA+D;AAAS;;AACjG,cAAIH,MAAM,CAACE,MAAP,KAAkB,CAAtB,EAAyB;AAAElB,YAAAA,OAAO,CAACC,GAAR,CAAYW,GAAZ;AAAmB;;AAC9C,cAAII,MAAM,CAACE,MAAP,GAAgB,CAApB,EAAuB;AACnB,gBAAIE,IAAI,GAAG,KAAKC,QAAL,CAAcC,GAAd,CAAkBN,MAAM,CAAC,CAAD,CAAxB,CAAX;;AACA,gBAAI,CAACI,IAAL,EAAW;AAAE;AAAA;AAAA,0CAAUD,OAAV,CAAkB,WAAlB,EAA+B,iBAA/B;AAAmD;AAAS;;AACzE,gBAAII,IAAI,GAAGP,MAAM,CAACQ,KAAP,EAAX;AACAJ,YAAAA,IAAI,CAACK,IAAL,CAAU,YAAV,EAAwBF,IAAxB,EAA8BP,MAA9B;AACH;AACJ;;AAlDkC,O","sourcesContent":["import { _decorator, Component, Node } from 'cc';\r\nimport { Subscribe } from '../Tools/Subscribe';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('NetWork')\r\nexport class NetWork extends Component {\r\n\r\n    // private ws: WebSocket = new WebSocket(\"ws://172.29.84.23:20099\");\r\n    private ws: WebSocket = new WebSocket(\"ws://82.157.123.54:9010/ajaxchattest\"); // 后续改为配置文件设置服务器地址\r\n    private nodeDict: Map<string, Node> = new Map<string, Node>();\r\n\r\n    onLoad() {\r\n        this.ws.onopen = function (e) {\r\n            console.log(e + \"\\n\" + \"Send Text WS was opened.\");\r\n        }\r\n        this.ws.onmessage = function (event) {\r\n            console.log(\"Response text msg: \" + event.data);\r\n            console.log(\"Response msg type: \" + typeof event.data);\r\n        }\r\n        this.ws.onerror = function (event) {\r\n            console.log(\"Send Text fired an error\");\r\n        }\r\n        this.ws.onclose = function (event) {\r\n            console.log(\"WebSocket instance closed.\");\r\n        }\r\n        this.scheduleOnce(() => {\r\n            if (this.ws.readyState === WebSocket.OPEN) {\r\n                this.ws.send(\"User connect success\");\r\n            }\r\n            else {\r\n                console.log(\"WebSocket instance wasn't ready...\");\r\n            }\r\n        }, 1);\r\n        // 需要初始化节点的字典\r\n        // this.nodeDict.set(\"nodeName\", node);\r\n    }\r\n\r\n    sendMsg(msg: string) {\r\n        this.ws.send(msg);\r\n    }\r\n\r\n    sendFile(file: ArrayBuffer | Blob) {\r\n        this.ws.send(file)\r\n    }\r\n\r\n    receiveMsg(msg: string) {\r\n        let params: string[] = msg.split(\";\"); // 分隔符写入配置？\r\n        if (params.length < 1) { Subscribe.trigger(\"alert err\", \"Message should not be null.\"); return; }\r\n        if (params.length === 1) { console.log(msg); }\r\n        if (params.length > 1) {\r\n            let node = this.nodeDict.get(params[0]);\r\n            if (!node) { Subscribe.trigger(\"alert err\", \"Node not found.\"); return; }\r\n            let type = params.shift();\r\n            node.emit(\"receiveMsg\", type, params);\r\n        }\r\n    }\r\n\r\n}\r\n"]}